{"version":3,"sources":["MultiViewerExample.tsx","RendererExample.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MultiViewerExample","pdfs","title","source","i18nData","download","scaleDown","scaleUp","originalSize","pages","zoom","PdfjsLib","GlobalWorkerOptions","workerSrc","Examples","RendererExample","useState","pdfDoc","setPdfDoc","useEffect","a","getDocument","url","promise","doc","getPdfDoc","downloadBtn","App","MultiViewer","example","setExample","className","Object","keys","map","k","key","undefined","onClick","Renderer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TA+BeA,G,MA3BgB,WAY7B,OACE,kBAAC,IAAD,CACEC,KAba,CACf,sBACA,CACEC,MACE,oEACFC,OAAQ,2CAEV,sBACA,uBAMEC,SAAU,CACRC,SAAU,gBACVC,UAAW,cACXC,QAAS,mBACTC,aAAc,sBACdC,MAAO,SACPC,KAAM,0B,wBCtBdC,IAASC,oBAAoBC,UAC3B,gEAEF,ICFKC,EDsBUC,EApBa,WAAO,IAAD,EACJC,qBADI,mBACzBC,EADyB,KACjBC,EADiB,KAehC,OAZAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACET,IAASU,YAAY,CACrCC,IAAK,4CACJC,QAHa,OACVC,EADU,OAKhBN,EAAUM,GALM,2CAAH,qDAQfC,KACC,IAEER,EAEE,kBAAC,IAAD,CAAaA,OAAQA,EAAQS,aAAa,IAF7B,O,SCjBjBZ,K,0BAAAA,E,qBAAAA,M,KAOL,IAwBea,EAxBH,WAAO,IAAD,EACcX,mBAASF,EAASc,aADhC,mBACTC,EADS,KACAC,EADA,KAGhB,OACE,oCACE,wBAAIC,UAAU,gBACVC,OAAOC,KAAKnB,GAAwBoB,KAAI,SAACC,GAAD,OACxC,wBACEC,IAAKD,EACLJ,UAAWF,IAAYM,EAAI,cAAWE,EACtCC,QAAS,WACPR,EAAWhB,EAASqB,MAJxB,UAMKA,EANL,gBASJ,yBAAKJ,UAAU,YACZF,IAAYf,EAASc,aAAe,kBAAC,EAAD,MACpCC,IAAYf,EAASyB,UAAY,kBAAC,EAAD,SCjBtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d038b386.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { PdfMultiViewer } from 'react-pdfjs-multi';\nimport 'react-pdfjs-multi/dist/react-pdfjs-multi.css';\n\nconst MultiViewerExample: FC = () => {\n  const pdfFiles = [\n    'pdfs/test-pdf-a.pdf',\n    {\n      title:\n        'Trace-based Just-in-Time Type Specialization for DynamicLanguages',\n      source: 'pdfs/compressed.tracemonkey-pldi-09.pdf',\n    },\n    'pdfs/test-pdf-b.pdf',\n    'pdfs/test-pdf-c.pdf',\n  ];\n\n  return (\n    <PdfMultiViewer\n      pdfs={pdfFiles}\n      i18nData={{\n        download: 'Herunterladen',\n        scaleDown: 'Verkleinern',\n        scaleUp: 'Vergrößern',\n        originalSize: 'Originalgröße',\n        pages: 'Seiten',\n        zoom: 'Automatischer Zoom',\n      }}\n    />\n  );\n};\n\nexport default MultiViewerExample;\n","import React, { FC, useState, useEffect } from 'react';\nimport { PdfRenderer, PdfjsLib, PDFDocumentProxy } from 'react-pdfjs-multi';\n\nPdfjsLib.GlobalWorkerOptions.workerSrc =\n  '//cdnjs.cloudflare.com/ajax/libs/pdf.js/2.5.207/pdf.worker.js';\n\nconst RendererExample: FC = () => {\n  const [pdfDoc, setPdfDoc] = useState<PDFDocumentProxy>();\n\n  useEffect(() => {\n    const getPdfDoc = async () => {\n      const doc = await PdfjsLib.getDocument({\n        url: 'pdfs/compressed.tracemonkey-pldi-09.pdf',\n      }).promise;\n\n      setPdfDoc(doc);\n    };\n\n    getPdfDoc();\n  }, []);\n\n  if (!pdfDoc) return null;\n\n  return <PdfRenderer pdfDoc={pdfDoc} downloadBtn={false} />;\n};\n\nexport default RendererExample;\n","import React, { useState } from 'react';\nimport MultiViewerExample from './MultiViewerExample';\nimport RendererExample from './RendererExample';\n\nenum Examples {\n  MultiViewer = 'MultiViewer',\n  Renderer = 'Renderer',\n}\n\ntype Example = keyof typeof Examples;\n\nconst App = () => {\n  const [example, setExample] = useState(Examples.MultiViewer);\n\n  return (\n    <>\n      <ul className=\"examples-nav\">\n        {(Object.keys(Examples) as Example[]).map((k) => (\n          <li\n            key={k}\n            className={example === k ? 'active' : undefined}\n            onClick={() => {\n              setExample(Examples[k]);\n            }}\n          >{`${k}Example`}</li>\n        ))}\n      </ul>\n      <div className=\"examples\">\n        {example === Examples.MultiViewer && <MultiViewerExample />}\n        {example === Examples.Renderer && <RendererExample />}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}